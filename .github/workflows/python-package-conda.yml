name: ManimLib Creation Package CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_creation.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd creationbuild_package
        pip install -r requirements_creation.txt
        pip install build pytest flake8 mypy

    - name: Lint with flake8
      run: |
        cd creationbuild_package
        # stop the build if there are Python syntax errors or undefined names
        flake8 creation.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 creation.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking with mypy
      run: |
        cd creationbuild_package
        mypy creation.py --ignore-missing-imports || true

    - name: Test module import and self-test
      run: |
        cd creationbuild_package
        python -c "import creation; print('✅ 导入成功'); creation._module_self_test()"

    - name: Run unit tests
      run: |
        cd creationbuild_package
        python test_creation.py

    - name: Test Chinese encoding
      run: |
        cd creationbuild_package/中文输出文档
        python test_chinese_encoding.py

    - name: Test demo scripts
      run: |
        cd creationbuild_package
        python Demo_ShowSubmobjectsOneByOne.py
        cd 中文输出文档
        python Demo_ShowSubmobjectsOneByOne.py

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        cd creationbuild_package
        python -m build

    - name: Check package
      run: |
        cd creationbuild_package
        twine check dist/*

    - name: Test installation from wheel
      run: |
        cd creationbuild_package
        pip install dist/*.whl
        python -c "import creation; creation._module_self_test()"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: creationbuild_package/dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/manimlib-creation
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        # 如果您还没有设置PyPI trusted publishing，可以使用以下方式：
        # password: ${{ secrets.PYPI_API_TOKEN }}

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        pip install safety bandit

    - name: Check dependencies for security vulnerabilities
      run: |
        cd creationbuild_package
        safety check -r requirements_creation.txt

    - name: Run bandit security linter
      run: |
        cd creationbuild_package
        bandit -r creation.py -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: creationbuild_package/bandit-report.json
